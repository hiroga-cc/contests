package atcoder

fun abc124b(旅館の数: Int, heights: ArrayList<Int>): Int {
    val maxIndex = 旅館の数 - 1
    val 東から西の順番の各山の高さ = heights.reversed()
    var 前回のチャレンジャー山を阻んだかあるいは最も健闘した山の高さ = 東から西の順番の各山の高さ[1]
    var 前回のチャレンジャー山を阻んだかあるいは最も健闘した山の東からのindex = 1
    var 海を見られなかった旅館の数 = 0

    fun 前人未到(チャレンジャー山の高さ: Int) {
        東から西の順番の各山の高さ.subList(前回のチャレンジャー山を阻んだかあるいは最も健闘した山の東からのindex + 1, maxIndex + 1).forEachIndexed チャレンジ@{ j, モンスター山の高さ ->
            if (モンスター山の高さ > 前回のチャレンジャー山を阻んだかあるいは最も健闘した山の高さ) {
                前回のチャレンジャー山を阻んだかあるいは最も健闘した山の高さ = モンスター山の高さ
                前回のチャレンジャー山を阻んだかあるいは最も健闘した山の東からのindex = j
                if (モンスター山の高さ > チャレンジャー山の高さ) {
                    海を見られなかった旅館の数 += 1
                    return@チャレンジ
                }
            }
        }
    }

    fun 記録更新(チャレンジャーのindex: Int, チャレンジャーの山の高さ: Int){
        前回のチャレンジャー山を阻んだかあるいは最も健闘した山の東からのindex = チャレンジャーのindex
        前回のチャレンジャー山を阻んだかあるいは最も健闘した山の高さ = チャレンジャーの山の高さ
    }

    東から西の順番の各山の高さ.forEachIndexed 全チャレンジ@{ i, チャレンジャー山の高さ ->
        if (i == maxIndex){ return@全チャレンジ }

        if (i < 前回のチャレンジャー山を阻んだかあるいは最も健闘した山の東からのindex){
            if (チャレンジャー山の高さ < 前回のチャレンジャー山を阻んだかあるいは最も健闘した山の高さ){
                海を見られなかった旅館の数 += 1
            } else {
                前人未到(チャレンジャー山の高さ)
            }
        } else {
            記録更新(i, チャレンジャー山の高さ)
            前人未到(チャレンジャー山の高さ)
        }
    }
    return 旅館の数 - 海を見られなかった旅館の数
}
